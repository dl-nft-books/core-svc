post:
  tags:
    - Tokens
  summary: Create Token
  operationId: createToken
  requestBody:
    content:
      application/vnd.api+json:
        schema:
          type: object
          required:
            - data
          properties:
            data:
              type: object
              $ref: '#/components/schemas/CreateToken'
  responses:
    '200':
      description: Token created successfully
      content:
        application/vnd.api+json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/TokenKey'
    '400':
      description: bad request
    '500':
      description: internal error
get:
  tags:
    - Tokens
  summary: List all tokens
  operationId: ListTokens
  parameters:
    - $ref: '#/components/parameters/pageNumberParam'
    - $ref: '#/components/parameters/pageLimitParam'
    - name: 'filter[chain_id]'
      in: query
      description: Array of chain_ids to be filtered with
      explode: false
      required: false
      schema:
        type: integer
        example: 5
    - name: 'filter[token_id]'
      in: query
      description: Token ID to be filtered with
      explode: false
      required: false
      schema:
        type: integer
    - name: 'filter[account]'
      in: query
      description: Array of payer accounts to be filtered with
      explode: false
      required: false
      schema:
        type: array
        items:
          type: string
    - name: 'filter[metadata_hash]'
      in: query
      description: Array of metadata IPFS hash to be filtered with
      explode: false
      required: false
      schema:
        type: string
    - name: 'filter[is_token_payment]'
      in: query
      description: True if token payment and false if nft exchange
      explode: false
      required: false
      schema:
        type: boolean
    - name: 'filter[name]'
      in: query
      description: Array of names (titles) to be filtered with
      explode: false
      required: false
      schema:
        type: array
        items:
          type: string
    - name: 'filter[status]'
      in: query
      description: Array of task states to be filtered with
      explode: false
      required: false
      schema:
        type: array
        items:
          type: integer
          enum:
            - name: uploading
              value: 1
            - name: finished_uploading
              value: 2
  responses:
    '201':
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/components/schemas/TokenArray'
              included:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
    '400':
      $ref: '#/components/responses/BadRequestError'
    '404':
      $ref: '#/components/responses/NotFoundError'
    '500':
      $ref: '#/components/responses/InternalError'
